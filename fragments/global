#!/bin/bash

# variables to define in env:
# LOCATION: weather location

# dirs
alias ...='../..'
alias ....='../../..'
alias .....='../../../..'
alias ......='../../../../..'

# ls
alias ls='ls -h --color=auto -N'
alias ll='ls -lh'
alias la='ls -lah'
alias l='ls -CF'

# color stuff
alias ip='ip -color=auto'

# power
alias ,reboot='sudo reboot'
alias ,off='sudo poweroff'
alias ,screenoff='loginctl lock-session; sleep 3; /bin/dbus-send --session --print-reply --dest=org.kde.kglobalaccel  /component/org_kde_powerdevil org.kde.kglobalaccel.Component.invokeShortcut string:"Turn Off Screen"'

# dotfiles stuff
alias ,reload_shell="source \$HOME/.dotfiles/zshrc"
alias ,edit_dotfiles="code ~/.dotfiles/"

# tmux with conf
alias tmux="tmux -f \$HOME/.dotfiles/conf/tmux.conf"
alias ta="tmux attach"

# gpg
alias ,gpglist='gpg --list-keys --keyid-format long'

# TODO: ssh edition/distribution
alias ,ssh_edit_config="nano ~/Seafile//conf/ssh/config"
alias ,ssh_edit_authorized_keys="nano ~/.dotfiles/conf/ssh/authorized_keys"
alias ,ssh_distribute="~/.dotfiles/conf/ssh/distribute.sh"

# package managers
if type pacman > /dev/null 2>&1; then
  alias pacu='sudo pacman -Syy'
  alias pacs='sudo pacman -Sy'
  alias pacr='sudo pacman -Rs'
  alias pacf='sudo pacman -F'
  alias pacupg='sudo pacman -Syyu'
  alias paru='paru -Syu --skipreview'
  alias pacclean='sudo pacman -Rns $(pacman -Qtdq)'
elif type apt > /dev/null 2>&1; then
  alias update='sudo apt update'
  alias upgrade='sudo apt upgrade -V'
  alias purge='sudo apt purge'
  alias install='sudo apt install'
  alias dist-upgrade='sudo apt-get dist-upgrade -V'
  alias clean='sudo orphaner; sudo apt-get autoremove --purge; sudo apt-get clean; sudo apt-get autoclean'
# todo: centos
fi

# ip
alias ,ip="curl icanhazip.com"
,ip_geo() {
  if [ $# -eq 0 ]; then
    curl -s http://ip-api.com/json/$(curl -s http://icanhazip.com) | jq -r '. | "\(.query): \(.city), \(.regionName), \(.country) (\(.as))"'
  else
    curl -s http://ip-api.com/json/"$1" | jq -r '. | "\(.query): \(.city), \(.regionName), \(.country) (\(.as))"'
  fi
}

# fast croc for lan
alias ,cs="CROC_SECRET=123123 croc --local send"
alias ,cr="CROC_SECRET=123123 croc"

# weather
,w1() { if [ $# -eq 0 ]; then curl    wttr.in/"$LOCATION"; else curl    wttr.in/"$1"; fi; }
,w2() { if [ $# -eq 0 ]; then curl v2.wttr.in/"$LOCATION"; else curl v2.wttr.in/"$1"; fi; }

# cheat.sh cheatsheets
,cheat() { curl cheat.sh/"$1"; }

# ssh aliases
# background connections
,set_background_connection() { ssh -fN "$1" ; }

# clear background connections
,kill_background_connections() {
  for ssh_control_path in "$HOME/.ssh/control"*;
  do
    control_name=$(basename "$ssh_control_path")
    ssh -S "$ssh_control_path" -O exit "$control_name" &> /dev/null
  done
}

# mount remote directory
,ssh_mount() {
  if [ -z "$2" ]; then
    remote_path=/
  else
    remote_path="$2"
  fi

  [ -d "$HOME/$1" ] && [[ -n $(l -A "$HOME/$1") ]] && echo Directory \'"$1"\' exists and is not empty. Aborting. && return 1
  [ ! -d "$HOME/$1" ] && mkdir "$HOME/$1"

  sshfs "$1":"$remote_path" "$HOME"/"$1" -o kernel_cache,auto_cache,reconnect,no_readahead
}

# thefuck config
eval "$(thefuck --alias)"

# GPG password prompt
GPG_TTY=$(tty)
export GPG_TTY

# tere
tere() {
    local result
    result=$(command tere "$@")
    # shellcheck disable=SC2164
    [ -n "$result" ] && cd -- "$result"
}

# temporary fixes for wayland
alias ghostwriter="ghostwriter --disable-gpu"

GPG_TTY=$(tty)
export GPG_TTY
