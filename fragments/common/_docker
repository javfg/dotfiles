#!/bin/bash

# clean all images and containers
function ,docker_purge() {
    echo "This will remove all Docker images and containers. Are you sure?"
    select yn in "Yes" "No"; do
        case $yn in
            Yes ) sudo docker rm "$(sudo docker ps -a -q)"; sudo docker rmi "$(sudo docker images -q)"; break;;
            No ) break;;
        esac
    done

    # =''
}

# shell in running container
function ,docker_it() {
    docker exec -it "$@" /bin/bash || docker exec -it "$@" /bin/sh
}

# images
alias ,dils='docker image ls'
alias ,dilsa='docker image ls -a'
function dirm() { docker image rm "$@" ; }

# containers
alias ,dcls='docker container ls'
alias ,dclsa='docker container ls -a'
function ,dcrm() { docker container rm "$@" ; }

# volumes
alias ,dvls='docker volume ls'
function ,dvrm() { docker volume rm "$@" ; }

# docker-compose
alias ,dcup='docker compose up'
alias ,dcupd='docker compose up -d'
alias ,dcupb='docker compose up --build'
alias ,dcupdb='docker compose up -d --build'
alias ,dcdown='docker compose down'

function ,dps() {
    # Define color codes for better readability
    local GREEN='\033[1;32m'    # Bright green for container ID
    local BLUE='\033[1;34m'     # Bright blue for image
    local PURPLE='\033[1;35m'   # Purple for container names
    local CYAN='\033[1;36m'     # Cyan for status
    local GRAY='\033[0;90m'     # Gray for ports
    local RESET='\033[0m'       # Reset color

    # Run docker ps with custom format and process output
    command docker ps --all --format "{{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}" \
        | (echo -e "CONTAINER_ID\tNAMES\tIMAGE\tSTATUS\tPORTS" && cat) \
        | awk -v g="${GREEN}" -v p="${PURPLE}" -v b="${BLUE}" -v c="${CYAN}" -v gr="${GRAY}" -v r="${RESET}" \
            'BEGIN {FS="\t"; OFS="\t"}
            function extract_host_port(port_str) {
                # For published ports (8080->80/tcp), get the host port (8080)
                if (port_str ~ /->/) {
                    match(port_str, /^[0-9]+/)
                    return sprintf("%d", substr(port_str, RSTART, RLENGTH))
                }
                # For exposed ports (80/tcp), get the port (80)
                match(port_str, /^[0-9]+/)
                return sprintf("%d", substr(port_str, RSTART, RLENGTH))
            }

            function clean_ports(ports) {
                if (ports == "") return ""

                # Split ports into array
                split(ports, port_array, ",")
                delete unique_ports
                delete port_list
                delete port_numbers
                num_ports = 0

                # Process each port mapping
                for (i in port_array) {
                    # Skip empty entries
                    if (port_array[i] == "") continue

                    # Skip any entry containing IPv6 markers
                    if (port_array[i] ~ /(\[.*\]|::)/) continue

                    # Remove IPv4 address part
                    gsub(/0\.0\.0\.0:/, "", port_array[i])

                    # Trim whitespace
                    gsub(/^[ \t]+|[ \t]+$/, "", port_array[i])

                    # Store in array if its a valid port format
                    if (port_array[i] ~ /^[0-9]+(->)?[0-9]+\/(tcp|udp)$/) {
                        if (!unique_ports[port_array[i]]) {
                            port_num = extract_host_port(port_array[i])
                            port_list[++num_ports] = port_array[i]
                            port_numbers[num_ports] = port_num + 0  # Force numeric context
                            unique_ports[port_array[i]] = 1
                        }
                    }
                }

                # Sort ports by host port number
                for (i = 1; i <= num_ports; i++) {
                    for (j = i + 1; j <= num_ports; j++) {
                        if (port_numbers[i] > port_numbers[j]) {
                            # Swap both the full port string and its number
                            temp = port_list[i]
                            port_list[i] = port_list[j]
                            port_list[j] = temp

                            temp = port_numbers[i]
                            port_numbers[i] = port_numbers[j]
                            port_numbers[j] = temp
                        }
                    }
                }

                # Join sorted ports
                result = ""
                for (i = 1; i <= num_ports; i++) {
                    if (result != "") result = result ", "
                    result = result port_list[i]
                }

                return result
            }
            {
                if (NR == 1) {
                    print $0
                } else {
                    clean_ports_val = clean_ports($5)
                    printf "%s%s%s\t%s%s%s\t%s%s%s\t%s%s%s\t%s%s%s\n",
                        g, $1, r,
                        p, $2, r,
                        b, $3, r,
                        c, $4, r,
                        gr, clean_ports_val, r
                }
            }' \
        | column -s $'\t' -t \
        | (sed -u 1q; sort -k2)

    # Reset colors after execution
    echo -en "${RESET}"
}
